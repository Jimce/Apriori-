def combination(dataset,k):
    b=map(set,dataset);
    result=[];
    for i in range(len(dataset)):
        for j in range(i+1,len(dataset)):
            if dataset[i][:k-2]==dataset[j][:k-2]:
                result.append(list(b[i]|b[j]));
    return result;
def scanCK(D,ck,pmin):
    print ck
    count={}
    result=[];
    pro=[]
    for i in ck:
        for j in D:
            if i.issubset(j):
                if not count.has_key(i):#统计
                    count[i]=1
                else:
                    count[i]+=1
    #扫描统计结果
    support={}
    nitem=float(len(D));
    if nitem>0:
        for k in ck:
            support[k]=count[k]/nitem;
            if support[k]>pmin:
                pro.append(support[k]);
                result.append(list(k));
    return result,pro;
def createc1(dataset):
    c1=[];
    for i in dataset:
        for j in i:
            if not [j] in c1:
                c1.append([j]);
    return c1;
def apriori(dataset,pmin):
    c1=createc1(dataset);
    c1.sort()
    maxlength=0;
    for i in dataset:
        if len(i)>maxlength:
            maxlength=len(i);#计算元素最大的项目集
    i=1;
    result=[];
    ck=c1;  
    while i<=maxlength:
        b=map(frozenset,ck)
        lk,pro=scanCK(dataset,b,pmin)
        result.append(lk);
        i=i+1
        ck=combination(lk,i)   
    return result;


        
dataset=[[1,3,4],[2,3,5],[1,2,3,5],[2,5]]
result0=apriori(dataset,0.7)
print result0


